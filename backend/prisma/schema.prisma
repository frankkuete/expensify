generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  email        String        @unique
  password     String
  name         String?
  assets       Asset[]
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Asset {
  id              String             @id @default(uuid()) @db.Uuid
  userId          String             @db.Uuid
  name            String             @db.VarChar(255)
  type            AssetType
  description     String?
  value          Decimal           @db.Decimal(18, 2)
  currency        String            @default("USD") @db.VarChar(10)
  categoryId      String            @db.Uuid
  subcategoryId   String?           @db.Uuid
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        AssetCategory     @relation(fields: [categoryId], references: [id])
  subcategory     AssetSubcategory? @relation(fields: [subcategoryId], references: [id])
  manualUpdates   ManualAssetUpdate[]
}

enum AssetType {
  real_estate
  stock
  bond
  etf
  cash
  custom
}

model AssetCategory {
  id            String             @id @default(uuid()) @db.Uuid
  name          String             @unique @db.VarChar(100)
  assets        Asset[]
  subcategories AssetSubcategory[]
}

model AssetSubcategory {
  id          String        @id @default(uuid()) @db.Uuid
  categoryId  String        @db.Uuid
  name        String        @db.VarChar(100)
  category    AssetCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assets      Asset[]
}

model ManualAssetUpdate {
  id            String    @id @default(uuid()) @db.Uuid
  assetId       String    @db.Uuid
  updatedValue  Decimal   @db.Decimal(18, 2)
  updateDate    DateTime  @default(now()) @db.Date
  note          String?
  asset         Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String              @id @default(uuid()) @db.Uuid
  userId          String              @db.Uuid
  type            TransactionType
  categoryId      String              @db.Uuid
  amount          Decimal             @db.Decimal(18, 2)
  currency        String              @default("USD") @db.VarChar(10)
  description     String?
  transactionDate DateTime            @db.Date
  createdAt       DateTime            @default(now())
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        TransactionCategory @relation(fields: [categoryId], references: [id])
}

enum TransactionType {
  income
  expense
}

model TransactionCategory {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @db.VarChar(100)
  transactions Transaction[]
}
